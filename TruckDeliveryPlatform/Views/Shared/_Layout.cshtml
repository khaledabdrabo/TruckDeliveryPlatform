@using System.Security.Claims
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Truck Delivery Platform</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/notifications.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="fas fa-truck me-2"></i>Truck Delivery
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        @if (User.Identity.IsAuthenticated)
                        {
                            @if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="Dashboard">
                                        <i class="fas fa-chart-line me-1"></i>Dashboard
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="WalletManagement">
                                        <i class="fas fa-wallet me-1"></i>Payment Management
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="TruckOwners">
                                        <i class="fas fa-users me-1"></i>Truck Owners
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="SystemConfig">
                                        <i class="fas fa-cogs me-1"></i>System Config
                                    </a>
                                </li>
                            }
                            else if (User.IsInRole("Customer"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Jobs" asp-action="Index">
                                        <i class="fas fa-list-alt me-1"></i>My Posts
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Jobs" asp-action="Create">
                                        <i class="fas fa-plus-circle me-1"></i>Post a Job
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="TruckOwner" asp-action="Dashboard">
                                        <i class="fas fa-th-list me-1"></i>Available Jobs
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="TruckOwner" asp-action="CreateProfile">
                                        <i class="fas fa-user-edit me-1"></i>My Profile
                                    </a>
                                </li>
                            }

                            <!-- Add notification bell -->
                            <li class="nav-item dropdown">
                                <a class="nav-link" href="#" id="notificationDropdown" role="button" 
                                   data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell"></i>
                                    <span id="notificationBadge" class="badge bg-danger position-absolute">0</span>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end notification-dropdown" 
                                     aria-labelledby="notificationDropdown">
                                    <div class="notification-header">
                                        <h6 class="dropdown-header d-flex justify-content-between align-items-center">
                                            Notifications
                                            <span class="badge bg-primary" id="totalNotifications">0</span>
                                        </h6>
                                    </div>
                                    <div class="notification-list" id="notificationsList">
                                        <!-- Notifications will be dynamically inserted here -->
                                    </div>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item text-center view-all" href="#">View All Notifications</a>
                                </div>
                            </li>
                        }
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>

    <main role="main" class="pb-3">
        @RenderBody()
    </main>

    <footer class="footer border-top text-muted">
        <div class="container">
            &copy; @DateTime.Now.Year - Truck Delivery Platform - 
            <a asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <!-- jQuery first, then Bootstrap JS -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Add SignalR client library -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <!-- Site scripts -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Validation scripts -->
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    
    @await RenderSectionAsync("Scripts", required: false)

    <!-- Add before closing body tag -->
    <div id="notificationToast" class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-primary text-white">
                <i class="fas fa-bell me-2"></i>
                <strong class="me-auto" id="notificationTitle">Notification</strong>
                <small id="notificationTime" class="text-white">just now</small>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                <p id="notificationMessage" class="mb-2"></p>
                <div class="mt-2 pt-2 border-top">
                    <a id="notificationLink" href="#" class="btn btn-primary btn-sm">View Details</a>
                </div>
            </div>
        </div>
    </div>

    <script>
        console.log("Starting notification setup...");
        
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        // Initialize audio with preload
        const notificationSound = new Audio('/sounds/notification.mp3');
        notificationSound.preload = 'auto';

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected Successfully!");
                // Load initial notifications when connection is established
                await loadNotifications();
            } catch (err) {
                console.error("SignalR Connection Error:", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Function to load notifications
        async function loadNotifications() {
            try {
                console.log("Fetching notifications...");
                const response = await fetch('/Notifications/GetLatest', {
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'include' // Include cookies
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log("Received notifications:", data);
                updateNotificationsList(data);
            } catch (error) {
                console.error('Error loading notifications:', error);
            }
        }

        // Function to update notifications list
        function updateNotificationsList(data) {
            const notificationsList = document.getElementById("notificationsList");
            const totalNotifications = document.getElementById("totalNotifications");
            const badge = document.getElementById("notificationBadge");
            
            if (notificationsList) {
                notificationsList.innerHTML = data.notifications.length > 0 
                    ? data.notifications.map(notification => `
                        <a class="dropdown-item ${!notification.isRead ? 'unread' : ''}" 
                           href="${notification.link}"
                           data-notification-id="${notification.id}"
                           onclick="handleNotificationClick(event, this)">
                            <div class="d-flex w-100 justify-content-between align-items-start">
                                <div class="notification-content">
                                    <h6 class="notification-title">
                                        ${notification.title}
                                        ${!notification.isRead ? '<span class="badge bg-primary ms-2">New</span>' : ''}
                                    </h6>
                                    <p class="notification-message">${notification.message}</p>
                                    <small class="notification-time">
                                        ${formatNotificationTime(notification.createdAt)}
                                    </small>
                                </div>
                            </div>
                        </a>
                    `).join('')
                    : '<div class="dropdown-item text-muted text-center">No notifications</div>';
                
                if (totalNotifications) {
                    totalNotifications.textContent = data.totalCount;
                }

                if (badge) {
                    badge.textContent = data.unreadCount;
                    badge.style.display = data.unreadCount > 0 ? "inline" : "none";
                }
            }
        }

        async function handleNotificationClick(event, element) {
            event.preventDefault();
            const notificationId = element.dataset.notificationId;
            const link = element.href;

            try {
                // Mark as read
                await fetch('/Notifications/MarkAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ notificationId })
                });

                // Navigate to the job details
                window.location.href = link;
            } catch (error) {
                console.error('Error handling notification click:', error);
                // If error occurs, still navigate to ensure user can see the content
                window.location.href = link;
            }
        }

        // Handle real-time notifications
        connection.on("ReceiveNotification", (notification) => {
            console.log("Received real-time notification:", notification);
            playNotificationSound();
            loadNotifications(); // Reload all notifications and counts
            
            // Update badge immediately for better UX
            const badge = document.getElementById("notificationBadge");
            if (badge) {
                const currentCount = parseInt(badge.textContent || "0");
                badge.textContent = currentCount + 1;
                badge.style.display = "inline";
            }
        });

        function formatNotificationTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffHours = (now - date) / (1000 * 60 * 60);
            
            if (diffHours < 24) {
                return date.toLocaleTimeString();
            } else if (diffHours < 48) {
                return 'Yesterday';
            } else {
                return date.toLocaleDateString();
            }
        }

        async function playNotificationSound() {
            try {
                await notificationSound.play();
            } catch (error) {
                console.error('Error playing notification sound:', error);
            }
        }

        // Load notifications when dropdown is opened
        document.getElementById('notificationDropdown').addEventListener('show.bs.dropdown', loadNotifications);

        // Start connection when document is ready
        document.addEventListener('DOMContentLoaded', startConnection);
    </script>
</body>
</html> 